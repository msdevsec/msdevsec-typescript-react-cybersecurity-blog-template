import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { Link, useNavigate } from 'react-router-dom';

interface Post {
  id: string;
  title: string;
  excerpt: string;
  slug: string;
  createdAt: string;
  author: {
    username: string;
  };
}

const Container = styled.div`
  max-width: 900px;
  margin: 0 auto;
  padding: 6rem 2rem 2rem 2rem;
`;

const Title = styled.h1`
  font-family: 'Orbitron', sans-serif;
  color: #FF0000;
  font-size: 2.5rem;
  margin-bottom: 1rem;
  text-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
`;

const SearchContainer = styled.div`
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
  align-items: center;
`;

const GoBackButton = styled.button`
  padding: 0.75rem 1.5rem;
  background: rgba(159, 0, 255, 0.1);
  border: 1px solid #9F00FF;
  border-radius: 4px;
  color: #9F00FF;
  font-family: 'Orbitron', sans-serif;
  cursor: pointer;
  transition: all 0.3s ease;
  white-space: nowrap;
  min-width: 120px;

  &:hover {
    background: rgba(159, 0, 255, 0.2);
    box-shadow: 0 0 10px rgba(159, 0, 255, 0.3);
    transform: translateY(-2px);
  }
`;

const SearchBar = styled.input`
  width: 100%;
  padding: 0.75rem;
  background: rgba(20, 0, 0, 0.8);
  border: 1px solid #FF0000;
  border-radius: 4px;
  color: #FF0000;
  font-family: 'Roboto Mono', monospace;
  transition: all 0.3s ease;

  &:focus {
    outline: none;
    box-shadow: 0 0 10px rgba(255, 0, 0, 0.3);
  }

  &::placeholder {
    color: rgba(255, 0, 0, 0.5);
  }
`;

const PostGrid = styled.div`
  display: grid;
  grid-template-columns: 1fr;
  gap: 2rem;
`;

const PostCardLink = styled(Link)`
  text-decoration: none;
  color: inherit;
  display: block;
`;

const PostCard = styled.article`
  background: rgba(20, 0, 0, 0.9);
  border: 1px solid #FF0000;
  border-radius: 8px;
  padding: 1.5rem;
  transition: all 0.3s ease;
  box-shadow: 0 0 10px rgba(255, 0, 0, 0.1);

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(255, 0, 0, 0.2);
  }
`;

const PostTitle = styled.h2`
  font-family: 'Orbitron', sans-serif;
  color: #FF4040;
  font-size: 1.8rem;
  margin-bottom: 1rem;
  text-shadow: 0 0 10px rgba(255, 64, 64, 0.5);
`;

const PostExcerpt = styled.p`
  color: #FF0000;
  opacity: 0.8;
  font-size: 1rem;
  line-height: 1.6;
  margin-bottom: 1rem;
  font-family: 'Roboto Mono', monospace;
`;

const MetaInfo = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  color: #FF0000;
  font-size: 0.875rem;
  opacity: 0.6;
  font-family: 'Orbitron', sans-serif;
`;

const Author = styled.span`
  color: #9F00FF;
  font-weight: bold;
  text-shadow: 0 0 5px rgba(159, 0, 255, 0.5);
  margin-left: 0.5rem;
`;

const CategoryTag = styled.span`
  background: rgba(255, 0, 0, 0.1);
  border: 1px solid #FF0000;
  color: #FF0000;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-family: 'Orbitron', sans-serif;
  font-size: 0.7rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  box-shadow: 0 0 5px rgba(255, 0, 0, 0.2);
  margin-right: 1rem;
`;

const LoadingMessage = styled.div`
  text-align: center;
  color: #FF0000;
  font-size: 1.2rem;
  padding: 2rem;
`;

const ErrorMessage = styled.div`
  text-align: center;
  color: #FF0000;
  font-size: 1.2rem;
  padding: 2rem;
`;

export const PentestingPage: React.FC = () => {
  const [posts, setPosts] = useState<Post[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await fetch('http://localhost:4000/api/posts?category=PENTESTING&isPublished=true');
        if (!response.ok) {
          throw new Error('Failed to fetch pentesting posts');
        }
        const data = await response.json();
        setPosts(data.posts);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load pentesting posts');
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  if (loading) {
    return <LoadingMessage>Loading pentesting posts...</LoadingMessage>;
  }

  if (error) {
    return <ErrorMessage>{error}</ErrorMessage>;
  }

  return (
    <Container>
      <Title>Pentesting</Title>
      <SearchContainer>
        <GoBackButton onClick={() => navigate('/')}>Go Back</GoBackButton>
        <SearchBar
          type="text"
          placeholder="Search pentesting posts by title..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </SearchContainer>
      <PostGrid>
        {posts
          .filter(post => 
            post.title.toLowerCase().includes(searchTerm.toLowerCase())
          )
          .map((post) => (
          <PostCardLink key={post.id} to={`/pentesting/${post.slug}`}>
            <PostCard>
              <PostTitle>{post.title}</PostTitle>
              <PostExcerpt>{post.excerpt}</PostExcerpt>
              <MetaInfo>
                <div>
                  <CategoryTag>Pentesting</CategoryTag>
                  <span>By <Author>{post.author.username}</Author></span>
                </div>
                <span>{new Date(post.createdAt).toLocaleDateString()}</span>
              </MetaInfo>
            </PostCard>
          </PostCardLink>
        ))}
      </PostGrid>
    </Container>
  );
};
